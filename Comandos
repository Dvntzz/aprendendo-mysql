-- Criando banco
CREATE DATABASE nomeDoBanco;

-- REMOVER BANCO
DROP DATABASE nomeDoBanco;

-- SELECIONANDO UM BANCO
USE nomeDoBanco;

-- CRIAR TABELA
CREATE TABLE nomeDaTabela (
 nome VARCHAR(100)
);

-- REMOVER TABELA
DROP TABLE nomeDaTabela;

-- TIPOS DE DADOS x = limite de caracteres
-- texto = VARCHAR(x)
-- numero = INT(x)
-- datas = DATE, TIMESTAMP

CREATE TABLE nomeDaTabela (
    coluna1 VARCHAR(100),
    coluna2 INT,
    coluna3 DATE
);

-- ALTERAR UMA TABELA
ALTER TABLE nomeDaTabela  ADD COLUMN coluna4 VARCHAR(x);

====
-- CRUD
-- C = Create = INSERT
-- R = Read = SELECT ( WHERE)
-- U = Update = UPDATE
-- D = Delete

-- LENDO DADOS
-- * (anteristico) = todas as colunas
SELECT * FROM nomeDaTabela;
SELECT coluna2 FROM nomeDaTabela;

-- LENDO DADO ESPECIFICO
SELECT * FROM nomeDaTabela
WHERE coluna1 = "xxxx";

-- CRIANDO DADOS
INSERT INTO nomeDaTabela(coluna1, coluna2, coluna3, coluna4)
VALUES ("XXXXXX", "XXXXX", "xxxx-xx-xx", "xxxxxxx");

-- ATUALIZANDO DADOS (Sempre usar o where)
-- SET SQL_SAFE_UPDATES = 0 <- query que retira o comportamento padrão do SQL workbench de não permitir que dados possam ser modificados sem a chave primaria.
SET SQL_SAFE_UPDATES = 0
UPDATE nomeDaTabela SET coluna3 = xxxx WHERE coluna1 = "xxxxx";

-- DELETANDO DADOS (Sempre usar o where)
DELETE FROM pessoas WHERE profissao = "Guardinha";

======
-- CONSTRAINTS

Nessa nova tabela a chave primaria será o *id*
com uma chave primaria podemos desconsiderar o uso do "SET SQL_SAFE_UPDATES = 0".
além de ser mais acertivo na hora de manusear os dados do bd



CREATE TABLE pessoas (
	   id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nome VARCHAR(100),
    salario INT,
    data_nascimento DATE
);




